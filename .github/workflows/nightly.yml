name: CMake Nightly Build

on:
  workflow_dispatch:
  schedule:
    - cron: "0 20 * * *"

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        arch: [ aarch64, x86_64 ]

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: 'true'

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        sudo apt-get install -y gcc-10-aarch64-linux-gnu g++-10-aarch64-linux-gnu
        cmake -E make_directory ${{github.workspace}}/build
        cmake -E make_directory ${{github.workspace}}/install
      
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install -DCMAKE_MODULE_PATH=${{github.workspace}}/cmake -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/cmake/toolchains/${{ matrix.arch }}-linux-gnu.cmake

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Install
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Create ARIX directory structure and generate initrd file
      run: cmake --install .
    
    - name: Archive
      working-directory: ${{github.workspace}}/install
      shell: bash
      run: tar czvf ./ARIX-${{ matrix.arch }}.tgz ./ARIX ./initrd ./vmlinuz
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: arix-archive
        path: ${{github.workspace}}/install/ARIX-${{ matrix.arch }}.tgz
        retention-days: 5

  deploy:
    runs-on: ubuntu-20.04
    needs: build
    steps:  
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: arix-archive
        path: ${{github.workspace}}/uploads
    
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: nightly
        files: ${{github.workspace}}/uploads/**
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
