{
    "configuration": {
        "name": "exec",
        "type": "library",
        "version.major": 60,
        "version.minor": 1,
        "base.type": "Library",
        "base.name": "ExecBase"
    },
    "cdef": [
        "#include <exec/nodes.h>",
        "#include <exec/lists.h>",
        "#include <exec/avl.h>",
        "#include <exec/ports.h>",
        "#include <exec/mutex.h>",
        "#include <exec/io.h>",
        "#include <utility/hooks.h>",
        "#include <utility/tagitem.h>",
        "#include <stddef.h>",
        "#include <stdint.h>",
        "#include <unistd.h>"
    ],
    "functions": [
        [ "struct Library *",   "Open", "void * handle", "uint32_t version" ],
        [ "void *",             "Close" ],
        [ "void *",             "Expunge" ],
        [ "void *",             "GetHandle" ],

        [ "uuid_t",             "GetRandomID", "uint8_t type" ],

        [ "void",               "Reschedule" ],
        [ "void",               "Spawn", "struct Hook * hook" ],
        [ "void",               "CreateThread", "struct TagItem * tags" ],

        [ "struct Library *",   "OldOpenLibrary", "const char * libName" ],
        [ "struct Library *",   "OpenLibrary", "const char * libName", "uint32_t version" ],
        [ "void",               "CloseLibrary", "struct Library * library" ],
        [ "void *",             "GetSymbolAddress", "struct Library * library", "const char * symbol" ],

        [ "void",               "Insert", "struct List * list", "struct Node * node", "struct Node * pred" ],
        [ "void",               "AddHead", "struct List * list", "struct Node * node" ],
        [ "void",               "AddTail", "struct List * list", "struct Node * node" ],
        [ "void",               "Remove", "struct Node * node" ],
        [ "struct Node *",      "RemHead", "struct List * list" ],
        [ "struct Node *",      "RemTail", "struct List * list" ],
        [ "void",               "Enqueue", "struct List * list", "struct Node * node" ],
        [ "struct Node *",      "FindName", "struct List * list", "const char * name" ],

        [ "void *",             "AllocMem", "size_t byteSize", "uint32_t requirements" ],
        [ "void *",             "AllocMemAligned", "size_t byteSize", "size_t align", "uint32_t requirements" ],
        [ "void *",             "AllocVec", "size_t byteSize", "uint32_t requirements" ],
        [ "void *",             "AllocVecAligned", "size_t byteSize", "size_t align", "uint32_t requirements" ],
        [ "void *",             "AllocAbs", "size_t byteSize", "void * location" ],
        [ "void *",             "ReallocMem", "void * memoryBlock", "size_t newSize" ],
        [ "void",               "FreeMem", "void * memoryBlock", "size_t byteSize" ],
        [ "void",               "FreeVec", "void * memoryBlock" ],
        [ "size_t",             "AvailMem", "uint32_t attributes" ],
        [ "void *",             "CreatePool", "uint32_t requirement", "size_t puddleSize", "size_t threshSize" ],
        [ "void",               "DeletePool", "void * pool" ],
        [ "void *",             "AllocPooled", "void * pool", "size_t byteSize" ],
        [ "void *",             "AllocVecPooled", "void * pool", "size_t byteSize" ],
        [ "void *",             "ReallocPooled", "void * pool", "void * memoryBlock", "size_t newSize" ],
        [ "void",               "FreePooled", "void * pool", "void * memoryBlock", "size_t byteSize" ],
        [ "void",               "FreeVecPooled", "void * pool", "void * memoryBlock" ],

        [ "struct MsgPort *",   "CreateMsgPort" ],
        [ "void",               "DeleteMsgPort", "struct MsgPort * port" ],
        [ "uuid_t",             "FindPort", "const char * name" ],
        [ "int",                "TestPort", "uuid_t portID" ],
        [ "int",                "AddPort", "struct MsgPort * port", "const char * name" ],
        [ "void",               "RemPort", "struct MsgPort * port" ],
        [ "struct Message *",   "GetMsg", "struct MsgPort * port" ],
        [ "void",               "PutMsg", "uuid_t portID", "struct Message * msg" ],
        [ "void",               "ReplyMsg", "struct Message * msg" ],
        [ "void",               "DiscardMsg", "struct Message * msg" ],
        [ "void",               "WaitPort", "struct MsgPort * port" ],

        [ "void *",             "CreateIORequest", "struct MsgPort * ioReplyPort", "size_t size"],
        [ "void",               "DeleteIORequest", "struct IORequest * io"],
        [ "LONG",               "DoIO", "struct IORequest * io"],

        [ "struct Mutex *",     "CreateMutex", "int initialState" ],
        [ "void",               "InitMutex", "struct Mutex * mutex", "int initialState" ],
        [ "void",               "DeleteMutex", "struct Mutex * mutex" ],
        [ "int",                "ObtainMutex", "struct Mutex * mutex" ],
        [ "int",                "ReleaseMutex", "struct Mutex * mutex" ],
        [ "int",                "AttemptMutex", "struct Mutex * mutex" ],

        [ "void",               "CopyMem", "const void * source", "void * dest", "size_t size" ],
        [ "void",               "CopyMemQuick", "const void * source", "void * dest", "size_t size" ],

        [ "struct AVLNode *",   "AVL_AddNode", "struct AVLNode ** root", "struct AVLNode * node", "AVLNODECOMP func" ],
        [ "struct AVLNode *",   "AVL_RemNodeByAddress", "struct AVLNode ** root", "struct AVLNode * node" ],
        [ "struct AVLNode *",   "AVL_RemNodeByKey", "struct AVLNode ** root", "AVLKey key", "AVLKEYCOMP func" ],
        [ "struct AVLNode *",   "AVL_FindNode", "const struct AVLNode * root", "AVLKey key", "AVLKEYCOMP func" ],
        [ "struct AVLNode *",   "AVL_FindPrevNodeByAddress", "const struct AVLNode * node" ],
        [ "struct AVLNode *",   "AVL_FindPrevNodeByKey", "const struct AVLNode * root", "AVLKey key", "AVLKEYCOMP func" ],
        [ "struct AVLNode *",   "AVL_FindNextNodeByAddress", "const struct AVLNode * node" ],
        [ "struct AVLNode *",   "AVL_FindNextNodeByKey", "const struct AVLNode * node", "AVLKey key", "AVLKEYCOMP func" ],
        [ "struct AVLNode *",   "AVL_FindFirstNode", "const struct AVLNode * root" ],
        [ "struct AVLNode *",   "AVL_FindLastNode", "const struct AVLNode * root" ]
    ]
}
